#include<iostream>
#include<vector>

using namespace std;

vector< vector<char> > table;

void initialize_table(){
    int n, k;
    char letter;
    cout<<"Please, input number of rows."<<endl;
    cin>>n;
    cout<<"Please, input number of columns."<<endl;
    cin>>k;
    cout<<"Please, input "<<n*k<<" letters to fill he table."<<endl;
    for(int i = 0; i < n; i++){
        vector<char> y;
        for(int j = 0; j < k; j++){
            cin>>letter;
            y.push_back(letter);
        }
        table.push_back(y);
    }
}

void print_table(){
    for(int i = 0; i < table.size(); i++){
        for(int j = 0; j < table[i].size(); j++)
            cout<<table[i][j]<<" ";
        cout<<endl;
    }
}

//викаме функцията за клетка с първа буква същата като тази на word
//знаем, че word[0] = table[x][y]
bool horizontaly_right(char* word,int x,int y){
    int i = 1;
    while(word[i] != '\0'){
        if(y+i >= table[x].size() || table[x][y+i] != word[i]) return 0;
        i++;
    }
    return 1;
}

bool horizontaly_left(char* word,int x,int y){
    int i = 1;
    while(word[i] != '\0'){
        if(y-i < 0 || table[x][y-i] != word[i]) return 0;
        i++;
    }
    return 1;
}

bool vertically_down(char* word,int x,int y){
    int i = 1;
    while(word[i] != '\0'){
        if(x+i >= table.size() || table[x+i][y] != word[i]) return 0;
        i++;
    }
    return 1;
}

bool vertically_up(char* word,int x,int y){
    int i = 1;
    while(word[i] != '\0'){
        if(x-i < 0 || table[x-i][y] != word[i]) return 0;
        i++;
    }
    return 1;
}

bool across_right(char* word,int x,int y){
    int i = 1;
    while(word[i] != '\0'){
        if(y+i >= table[x].size() || x+i >= table.size() || table[x+i][y+i] != word[i]) return 0;
        i++;
    }
    return 1;
}

bool across_left(char* word,int x,int y){
    int i = 1;
    while(word[i] != '\0'){
        if(y-i < 0 || x-i < 0 || table[x-i][y-i] != word[i]) return 0;
        i++;
    }
    return 1;
}
int main(){
    initialize_table();
    print_table();
    char word[100];
    cin>>word;
    int number_words = 0;
    for(int i = 0; i < table.size(); i++)
        for(int j = 0; j < table[i].size(); j++)
            if(table[i][j] == word[0]){
                number_words += horizontaly_left(word,i,j);
                number_words += horizontaly_right(word,i,j);
                number_words += vertically_down(word,i,j);
                number_words += vertically_up(word,i,j);
                number_words += across_left(word,i,j);
                number_words += across_right(word,i,j);
            }
    cout<<number_words<<endl;
    return 0;
}
